<?php

/**
 * @file commerce_email_custom_order_items.module
 */

/**
 * Implements hook_token_info_alter().
 */
function commerce_email_custom_order_items_token_info_alter(&$data) {
  $data['tokens']['commerce-order']['custom_order_items'] = array(
    'name' => t('Custom order items'),
    'description' => t('A table containing the custom order items.'),
  );
}

/**
 * Implements hook_tokens().
 */
function commerce_email_custom_order_items_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'commerce-order' && !empty($data['commerce-order']) && !empty($tokens['custom_order_items'])) {
    $replacements[$tokens['custom_order_items']] = _commerce_email_custom_order_items($data['commerce-order']);
  }
  return $replacements;
}

function _commerce_email_custom_order_items_update_rows_info($rows_info, $type, $data, $row_index) {
  if (empty($rows_info[$type])) {
    $rows_info[$type] = array(
      'indices' => array($row_index),
      'data' => array($data),
    );
  }
  else {
    $rows_info[$type]['indices'][] = $row_index;
    $rows_info[$type]['data'][] = $data;
  }
  return $rows_info;
}

/**
 * Returns a rendered table of commerce order items. Based on
 * commerce_email_order_items().
 *
 * @param $order
 *   The commerce order object
 *
 * @param $theme
 * (optional) Defaults to FALSE
 *   Flag to return the contents of the order
 *   as a html table or an array
 *
 * @return
 *   String containing the rendered order table
 *   or an array of the order
 */
function _commerce_email_custom_order_items($order, $theme=TRUE) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = number_format(commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), $currency_code), 2);

  // Inform hook client of $header structure.
  $header_structure = array('product', 'quantity', 'price');
  $header = array(
    array('data' => t('Product'), 'style' => array('text-align: left;')),
    array('data' => t('Qty'), 'style' => array('text-align: left;')),
    array('data' => t('Price (@currency_code)', array('@currency_code' => $currency_code)), 'style' => array('text-align: left;'))
  );

  // Inform hook client of $rows info.
  $rows_info = array();
  $row_index = 0;
  // Build $rows.
  $rows = array();
  foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // Ensure type is available.
    $line_item_wrapper_value = $line_item_wrapper->value();
    if (!empty($line_item_wrapper_value->type)) {
      // Get type.
      $type = $line_item_wrapper_value->type;
      // Extra info on row.
      $rows_info = _commerce_email_custom_order_items_update_rows_info($rows_info, $type, $line_item_wrapper_value, $row_index);
    }
    else {
      continue;
    }

    switch ($type) {
      case 'product':
        // Special treatment for a product, since we want to get the title from
        // from the product entity instead of the line item.
        $title = htmlentities($line_item_wrapper->commerce_product->title->value(), ENT_QUOTES, "UTF-8");
        $title .= commerce_email_order_item_attributes($line_item_wrapper->commerce_product->product_id->value());

        $rows[] = array(
          'data' => array(
            array('data' => $title, 'style' => array('text-align: left;')),
            array('data' => $line_item_wrapper->quantity->value(), 'style' => array('text-align: left;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 2), 'style' => array('text-align: left;')),
          ),
        );
        break;
      default:
        // Use this for any other line item.
        $rows[] = array(
          'data' => array(
            array('data' => htmlentities($line_item_wrapper->line_item_label->value(), ENT_QUOTES, "UTF-8"), 'style' => array('text-align: left;')),
            array('data' => 1, 'style' => array('text-align: left;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($line_item_wrapper->commerce_unit_price->amount->value(), $currency_code), 2), 'style' => array('text-align: left;')),
          )
        );
        break;
    }
    $row_index++;
  }
  // Sale data.
  $data = $wrapper->commerce_order_total->data->value();
  if (!empty($data['components'])) {
    foreach ($data['components'] as $key => $component) {
      if ($data['components'][$key]['name'] == 'base_price') {
        // Update rows info.
        $rows_info = _commerce_email_custom_order_items_update_rows_info($rows_info, 'base_price', $data['components'][$key], $row_index);
        //$rows_info[] = 'base_price';
        $rows[] = array(
          'data' => array(
            ' ',
            array('data' => t('Subtotal:'), 'style' => array('font-weight: bold; text-align: right;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($data['components'][$key]['price']['amount'], $currency_code), 2), 'style' => array('font-weight: bold; text-align: left;')),
          )
        );
        $row_index++;
      }
      elseif (preg_match('/^tax\|/', $data['components'][$key]['name'])) {
        // Update rows info.
        $rows_info = _commerce_email_custom_order_items_update_rows_info($rows_info, 'tax', $data['components'][$key], $row_index);
        $rows[] = array(
          'data' => array(
            ' ',
            array('data' => $data['components'][$key]['price']['data']['tax_rate']['display_title'] . ':', 'style' => array('font-weight: bold; text-align: right;')),
            array('data' => number_format(commerce_currency_amount_to_decimal($data['components'][$key]['price']['amount'], $currency_code), 2), 'style' => array('font-weight: bold; text-align: left;')),
          )
        );
        $row_index++;
      }
    }
  }
  // Total.
  // Update rows info.
  $rows_info = _commerce_email_custom_order_items_update_rows_info($rows_info, 'total', array(), $row_index);
  $rows[] = array(
    'data' => array(
      ' ',
      array('data' => t('Total:'), 'style' => array('font-weight: bold; text-align: right;')),
      array('data' => $amount, 'style' => array('font-weight: bold; text-align: left;')),
    )
  );
  // Allow overriding on the order items.
  $rows = module_invoke_all('order_items_alter', $rows, $rows_info);
  // @todo Allow other modules to choose the theme template.
  // Output.
  if ($theme) {
    return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => array('width: 100%; border: 1px solid #ddd;'))));
  }
  else {
    return array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => array('width: 100%; border: 1px solid #ddd;')));
  }
}
